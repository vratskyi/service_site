---
import { getLangFromUrl, useTranslations } from '../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<div class="mt-5 grid place-content-center">
    
                <form id="my-form" action="https://formspree.io/f/xbjnprpp" method="POST" class="grid place-content-center mt-10 gap-y-5">
                  <div class="grid grid-flow-col place-content-center gap-x-2">
                      <label class="input input-bordered flex items-center gap-2">
                          {t('contact.form.name')}
                          <input type="text" name="name" maxlength="20" autocomplete="name" class="grow hover:cursor-text" value="" placeholder="Oleksii" required />
                      </label>
                      <label class="input input-bordered flex items-center gap-2">
                          Email
                          <input type="email" name="email" autocomplete="email" class="grow hover:cursor-text" value="" placeholder="example@gmail.com" required />
                      </label>
                  </div>
                  <label class="input input-bordered flex items-center gap-2">
                      {t('contact.form.site')}
                      <input type="text" name="site" autocomplete="name" class="grow hover:cursor-text" value="" placeholder="example.com" />
                  </label>
                  <textarea id="contactText" name="message" value="" maxlength="900" placeholder={t('contact.form.textarea')} required class="textarea textarea-bordered textarea-lg w-full max-w-full placeholder:text-sm hover:cursor-text" ></textarea>
                  <div class="label justify-end">
                      <span id="contactTextCounter" class="label-text-alt">0/900</span>
                  </div>
                  <div class="grid grid-flow-col place-content-between">
                      <button type="submit" class="btn btn-sm btn-primary place-self-start">{t('contact.form.button.submit')}</button>
                  </div>
                  <div class="mt-5">
                      <p id="my-form-status" class="prose"></p>
                  </div>
              </form>


                <div class="label-text-alt mt-10" set:html={t('contact.form.processing')}></div>
            <dialog id="my_modal_3" class="modal">
              <div class="modal-box">
                <form method="dialog">
                  <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
                </form>
                <h3 class="font-bold text-lg">{t('contact.modal.title')}</h3>
                <p class="py-4" set:html={t('contact.modal.description')}></p>
              </div>
            </dialog>
</div>

<script type="text/javascript" transition:persist data-astro-rerun is:inline>
    document.addEventListener('astro:page-load', async () => {

        const form = document.getElementById("my-form");
        const status = document.getElementById("my-form-status");

        async function handleSubmit(event) {
            event.preventDefault();

            const formData = new FormData(form);
            const data = {};
            formData.forEach((value, key) => {
                data[key] = value;
            });

            fetch(form.action, {
                method: form.method,
                body: JSON.stringify(data),
                headers: {
                    'Content-Type': 'application/json',
                },
            }).then(response => {
                if (response.ok) {
                    // Если отправка успешна, устанавливаем классы для успешной отправки
                    window.location.href = `/success`;
                    form.reset();
                } else {
                    // Если произошла ошибка, устанавливаем классы для ошибки
                    window.location.href = `/failed`;
                }
            }).catch(error => {
                // Если произошла ошибка при отправке, устанавливаем классы для ошибки
                window.location.href = `/error`;
            });
        }

        form.addEventListener("submit", handleSubmit);
    });
</script>

<script type="text/javascript" transition:persist data-astro-rerun is:inline>

    document.addEventListener('astro:page-load', () => {
        const counter = document.getElementById('contactTextCounter');
        const contactText = document.getElementById('contactText');

            contactText.addEventListener('input', () => {
            let count = contactText.value.length; // Получаем текущую длину текста в поле ввода

            // Если поле ввода пустое, счетчик устанавливается в 0
            if (count === 0) {
                counter.textContent = '0/900';
                return; // Выходим из функции, чтобы не выполнять лишний код
            }

            // Ограничиваем максимальное количество символов до 900
            if (count > 900) {
                contactText.value = contactText.value.slice(0, 900); // Обрезаем текст до 900 символов
                count = 900; // Устанавливаем счетчик в 900
            }

            // Если пользователь удаляет текст, уменьшаем счетчик
            if (count < parseInt(counter.textContent)) {
                count = parseInt(counter.textContent) - 1;
            }

            // Обновляем значение счетчика
            counter.textContent = `${count}/900`;
        });

    });

</script>